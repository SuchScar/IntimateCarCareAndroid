package com.Activity;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import org.json.JSONObject;
import org.xutils.x;

import android.R.string;
import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.util.DisplayMetrics;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.Bll.CBLL;
import com.Entity.CarSet;
import com.Entity.HomeEntity;
import com.Entity.UserEntity;
import com.Http.HttpCallback;
import com.Http.HttpTask;
import com.baidu.mapapi.common.SysOSUtil;
import com.tool.CircleImageView;
import com.tool.JSONEntity;
import com.tool.MyURL;
import com.tool.SPUtils;
import com.tool.ToastUtil;

/**
 * @author ZL
 * 
 */

public class MainActivity extends Activity {

	private LinearLayout lin_weather, lin_mallhorizontalscrollview_header,
			lin_remotecheck, lin_my, lin0, lin_GPS, lin_carcheck, lin_consult;
	private RelativeLayout rel_remind;
	private TextView temperature, carwash, trafficlimit, tv_changecar,
			tv_score, tv_remindnum;
	private ImageView carimg, img_weather;
	private CircleImageView circleicon;
	private Button mall;
	private PopupWindow popupview;
	private CarSet carset;

	// 屏幕长宽
	private int width, height;
	// 水平滚动参数
	private HorizontalScrollView mallhorizontalscrollview;
	private final Handler mHandler = new Handler();

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.activity_main);
		DisplayMetrics dm = getResources().getDisplayMetrics();
		width = dm.widthPixels;
		height = dm.heightPixels;

		AutoLogin();

		Initview();
		SetListenr();
		Initdata();// 商城推荐
		mHandler.post(ScrollRunnable);

	}

	private void Initdata() {
		// TODO Auto-generated method stub
		for (int i = 0; i < 10; i++) {
			View goodsitem = LayoutInflater.from(this).inflate(
					R.layout.item_mallhorizontalscrollview, null);
			ImageView goodsimg = (ImageView) goodsitem
					.findViewById(R.id.goodsimg);
			TextView goodsprice = (TextView) goodsitem
					.findViewById(R.id.goodsprice);

			LinearLayout.LayoutParams imgparams = (LayoutParams) goodsimg
					.getLayoutParams();
			imgparams.height = height / 100 * 6;
			imgparams.width = imgparams.height;
			goodsimg.setLayoutParams(imgparams);
			goodsimg.setBackgroundResource(R.drawable.ic_launcher);

			LinearLayout.LayoutParams priceparams = (LayoutParams) goodsprice
					.getLayoutParams();
			priceparams.height = height / 100 * 3;
			priceparams.width = height / 100 * 12;
			goodsprice.setLayoutParams(priceparams);
			goodsprice.setText("商品价格:10元");
			goodsitem.setOnClickListener(new OnClickListener() {

				@Override
				public void onClick(View v) {
					// TODO Auto-generated method stub
					ToastUtil.show(MainActivity.this, "youqu");
				}
			});
			lin_mallhorizontalscrollview_header.addView(goodsitem);
		}
	}

	private void Initview() {
		// TODO Auto-generated method stub
		lin_weather = (LinearLayout) findViewById(R.id.lin_weather);
		lin_mallhorizontalscrollview_header = (LinearLayout) findViewById(R.id.lin_mallhorizontalscrollview_header);
		temperature = (TextView) findViewById(R.id.temperature);
		carwash = (TextView) findViewById(R.id.carwash);
		trafficlimit = (TextView) findViewById(R.id.trafficlimit);
		carimg = (ImageView) findViewById(R.id.carimg);
		mall = (Button) findViewById(R.id.mall);
		mallhorizontalscrollview = (HorizontalScrollView) findViewById(R.id.mallhorizontalscrollview);
		circleicon = (CircleImageView) findViewById(R.id.circleicon);
		lin_remotecheck = (LinearLayout) findViewById(R.id.lin_remotecheck);
		lin_my = (LinearLayout) findViewById(R.id.lin_my);
		tv_changecar = (TextView) findViewById(R.id.tv_changecar);
		lin0 = (LinearLayout) findViewById(R.id.lin0);
		lin_GPS = (LinearLayout) findViewById(R.id.lin_GPS);
		tv_score = (TextView) findViewById(R.id.tv_score);
		tv_remindnum = (TextView) findViewById(R.id.tv_remindnum);
		lin_carcheck = (LinearLayout) findViewById(R.id.lin_carcheck);
		img_weather = (ImageView) findViewById(R.id.img_weather);
		lin_consult = (LinearLayout) findViewById(R.id.lin_consult);
		rel_remind = (RelativeLayout) findViewById(R.id.rel_remind);

		RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) circleicon
				.getLayoutParams();
		params.height = width / 4;
		params.width = params.height;
		circleicon.setLayoutParams(params);

	}

	private void SetListenr() {
		// TODO Auto-generated method stub

		mall.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Intent intent = new Intent(MainActivity.this, MyShopping.class);
				startActivity(intent);
			}
		});
		mallhorizontalscrollview.setOnTouchListener(new OnTouchListener() {

			@Override
			public boolean onTouch(View v, MotionEvent event) {
				// TODO Auto-generated method stub

				if (event.getAction() == MotionEvent.ACTION_UP) {
					mHandler.removeCallbacks(ScrollRunnable);
					mHandler.postDelayed(ScrollRunnable, 1000);
				}
				return false;
			}
		});
		lin_weather.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Intent intent = new Intent(MainActivity.this,
						MyweatherActivity.class);
				startActivity(intent);
			}
		});
		lin_remotecheck.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				ToastUtil.show(MainActivity.this, "该功能待开发");
			}
		});

		lin_my.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Intent intent = new Intent(MainActivity.this, MyActivity.class);
				startActivityForResult(intent, 2);
			}
		});

		tv_changecar.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				getPopupWindow();
				// 这里是位置显示方式,
				popupview.showAsDropDown(lin0);
			}
		});

		lin_GPS.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Intent intent = new Intent(MainActivity.this, GPSActivity.class);
				startActivity(intent);
			}
		});

		lin_carcheck.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Intent intent = new Intent(MainActivity.this,
						CarReportActivity.class);
				startActivity(intent);
			}
		});

		lin_consult.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Intent intent = new Intent(MainActivity.this,
						ConsultActivity.class);
				startActivity(intent);
			}
		});

		rel_remind.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Intent intent = new Intent(MainActivity.this,
						RemindActivity.class);
				startActivityForResult(intent, 1);
			}
		});

	}

	private Runnable ScrollRunnable = new Runnable() {
		@Override
		public void run() {
			int off = lin_mallhorizontalscrollview_header.getMeasuredWidth();
			// 模拟滑动
			if (off > 0) {
				mallhorizontalscrollview.scrollBy(1, 0);
				if (mallhorizontalscrollview.getScrollX() == off) {
					Thread.currentThread().interrupt();
				} else {
					mHandler.postDelayed(this, 10);
				}
			} else {
				mHandler.postDelayed(this, 1000);
			}
		}

	};

	@SuppressWarnings("unchecked")
	private void AutoLogin() {
		// TODO Auto-generated method stub
		if ((Integer) SPUtils.get(MainActivity.this, "userId", -1) == -1) {
			// 需要手动登录
			Intent intent = new Intent(MainActivity.this, LoginActivity.class);
			startActivity(intent);
			finish();
		} else {
			Boolean tag;
			tag = (Boolean) SPUtils.get(MainActivity.this, "logintag", false);
			System.out.println(tag);
			SPUtils.remove(MainActivity.this, "logintag");

			if (tag) {// 成功登陆,获取数据
				ToastUtil.show(MainActivity.this, "手动登录成功");

				RequestMainData();

			} else {// 需要自动登录
				String userAccount = (String) SPUtils.get(MainActivity.this,
						"userAccount", "");
				String userPassword = (String) SPUtils.get(MainActivity.this,
						"userPassword", "");
				HashMap<String, String> loginjson = new UserEntity()
						.toLoginJson(userAccount, userPassword);
				new HttpTask(loginCallback, MyURL.LOGIN).execute(loginjson);

			}

			// ToastUtil.show(MainActivity.this, "自动发送账号登录");
		}

	}

	// 自动登录callback
	private HttpCallback loginCallback = new HttpCallback() {

		@Override
		public void getResult(JSONObject json) {
			// TODO Auto-generated method stub

			CBLL cBllUser = CBLL.getInstance();
			JSONEntity entity = cBllUser.json2login(json);
			if (entity.isFlag()) {
				UserEntity UserEntity = (UserEntity) entity.getData();
				// 自动登录成功保存新令牌
				SPUtils.put(MainActivity.this, "userTokens",
						UserEntity.getTokens());
				// 获取首页数据
				// ToastUtil.show(MainActivity.this,"dddddddddd");
				RequestMainData();

			} else {
				if (entity.getMessage() == MyURL.MSG_OTHERS_ERROR) {
					ToastUtil.show(MainActivity.this, "服务器故障");
				} else if (entity.getMessage() == MyURL.MSG_PWD_ERROR) {
					ToastUtil.show(MainActivity.this, "用户名或密码错误，请重新输入");
					// 清空账号密码等缓存，重新登录
					SPUtils.clear(MainActivity.this);
					Intent intent = new Intent(MainActivity.this,
							LoginActivity.class);
					startActivity(intent);
					finish();
				}
			}

		}
	};

	private void limit(String carnumber) {
		Calendar FF = Calendar.getInstance(); // 获取本地的时间
		int day = FF.get(Calendar.DAY_OF_MONTH);
		for (int i = carnumber.length(); i > 0; i--) {
			String ss = carnumber.substring(i - 1, i);
			char c = ss.charAt(0);
			if (Character.isDigit(c)) {
				if (day % 2 != 0) { // 单号
					if (c % 2 != 0) { // 车牌号尾号是单号
						trafficlimit.setText("今日畅行");
						SPUtils.put(MainActivity.this, "TAG", trafficlimit
								.getText().toString());// 将是否限行存进本地
					} else {
						trafficlimit.setText("今日限号");
						SPUtils.put(MainActivity.this, "TAG", trafficlimit
								.getText().toString());// 将是否限行存进本地
					}
				} else { // 日期是双号
					if (c % 2 != 0) { // 车牌是单号

						trafficlimit.setText("今日限号");
						SPUtils.put(MainActivity.this, "TAG", trafficlimit
								.getText().toString());// 将是否限行存进本地
					} else {

						trafficlimit.setText("今日畅行");
						SPUtils.put(MainActivity.this, "TAG", trafficlimit
								.getText().toString());// 将是否限行存进本地
					}
				}
				break;
			} else {

			}
		}
	}

	private HttpCallback homeCallback = new HttpCallback() {

		@Override
		public void getResult(JSONObject json) {
			// TODO Auto-generated method stub
			CBLL cBllUser = CBLL.getInstance();
			JSONEntity entity = cBllUser.json2home(json);
			if (entity.isFlag()) {
				HomeEntity homeentity = (HomeEntity) entity.getData();
				temperature.setText(homeentity.getWeaather().getTemperture());
				carwash.setText(homeentity.getWeaather().getWashcar());
				tv_changecar.setText(homeentity.getDefaultcarnum());
				tv_score.setText(homeentity.getSafescore() + "");
				tv_remindnum.setText(homeentity.getRemindnum() + "条未读");
				x.image()
						.bind(carimg, MyURL.HIP + "/" + homeentity.getCarimg());

				limit(homeentity.getDefaultcarnum()); // 限行判断

				// img_weather.setImageResource(resId)
				if (homeentity.getWeaather().getWeathercondition().equals("晴")) {
					img_weather.setImageResource(R.drawable.qing);
				} else if (homeentity.getWeaather().getWeathercondition()
						.equals("阴")) {
					img_weather.setImageResource(R.drawable.qing);
				} else if (homeentity.getWeaather().getWeathercondition()
						.equals("大雨")) {
					img_weather.setImageResource(R.drawable.dayu);
				} else if (homeentity.getWeaather().getWeathercondition()
						.equals("小雨")) {
					img_weather.setImageResource(R.drawable.xiaoyu);
				} else if (homeentity.getWeaather().getWeathercondition()
						.equals("小雪")) {
					img_weather.setImageResource(R.drawable.xiaoxue);
				} else if (homeentity.getWeaather().getWeathercondition()
						.equals("大雪")) {
					img_weather.setImageResource(R.drawable.daxue);
				} else if (homeentity.getWeaather().getWeathercondition()
						.equals("多云")) {
					img_weather.setImageResource(R.drawable.duoyun);
				} else {
					img_weather.setImageResource(R.drawable.yin);
				}

				if (!homeentity.isIsboxbind()) {
					ToastUtil.show(MainActivity.this, "请激活盒子");
				}
				if (!homeentity.isIsboxonline()) {
					ToastUtil.show(MainActivity.this, "盒子离线");
				}
				
				SPUtils.put(MainActivity.this, "carnumber",
						homeentity.getDefaultcarnum());// 将默认车牌存入本地
				SPUtils.put(MainActivity.this, "isBoxbind",
						homeentity.isIsboxbind());
				SPUtils.put(MainActivity.this, "carId", homeentity.getCarid());
				SPUtils.put(MainActivity.this, "isBoxonline",
						homeentity.isIsboxonline());

			} else {
				if (entity.getMessage() == MyURL.MSG_OTHERS_ERROR) {
					ToastUtil.show(MainActivity.this, "获取失败");
				} else if (entity.getMessage() == MyURL.MSG_TOKENS_ERROR) {
					ToastUtil.show(MainActivity.this, "您的账号在别的地方登陆，请重新登录");
					// 重启app
					restartApplication();
				}
			}
		}
	};

	private HttpCallback homegoodsCallback = new HttpCallback() {

		@Override
		public void getResult(JSONObject json) {
			// TODO Auto-generated method stub
			CBLL cBllUser = CBLL.getInstance();
			JSONEntity entity = cBllUser.json2homegoods(json);

		}
	};

	private HttpCallback carlistCallback = new HttpCallback() {

		@Override
		public void getResult(JSONObject json) {
			// TODO Auto-generated method stub
			CBLL cBllUser = CBLL.getInstance();
			JSONEntity entity = cBllUser.json2carlist(json);
			if (entity.isFlag()) {
				carset = (CarSet) entity.getData();
				//SPUtils.put(MainActivity.this, "carList", carset);//车辆list不存
			} else {
				if (entity.getMessage() == MyURL.MSG_OTHERS_ERROR) {
					ToastUtil.show(MainActivity.this, "获取失败");
				} else if (entity.getMessage() == MyURL.MSG_TOKENS_ERROR) {
					ToastUtil.show(MainActivity.this, "您的账号在别的地方登陆，请重新登录");
					// 重启app
					restartApplication();
				}
			}
		}
	};
	
	// 重启app
	private void restartApplication() {
		final Intent intent = getPackageManager().getLaunchIntentForPackage(
				getPackageName());
		intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
		startActivity(intent);
	}

	// 获取首页数据
	@SuppressWarnings("unchecked")
	private void RequestMainData() {
		// HashMap<String, String> loginjson=new HashMap<String, String>();
		// new HttpTask(loginCallback, MyURL.LOGIN).execute(loginjson);
		HashMap<String, String> idtakjson = new UserEntity()
				.getIdTaken(MainActivity.this);
		// 首页数据
		new HttpTask(homeCallback, MyURL.HOME).execute(idtakjson);
		// 商城推荐列表

		// 车辆列表
		new HttpTask(carlistCallback, MyURL.CARLIST).execute(idtakjson);

	}

	// 初始化popupwindow
	protected void initPopuptWindow() {
		View view = getLayoutInflater().inflate(R.layout.popupview_gray, null,
				false);
		ListView listview = (ListView) view.findViewById(R.id.listview);
		List<String> list = new ArrayList<String>();
		for (int i = 0; i < carset.getSize(); i++) {
			list.add(carset.getItem(i).getCar_num());
		}
		// 添加一条数据用于添加车辆监听
		list.add("添加车辆");
		final String[] mStrings = (String[]) list.toArray(new String[0]);

		listview.setAdapter(new ArrayAdapter<String>(this,
				R.layout.listview_simpleitem, mStrings));

		listview.setOnItemClickListener(new OnItemClickListener() {

			@SuppressWarnings("unchecked")
			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				// -----------------------切换车辆---------------
				if (position == carset.getSize()) {
					Intent intent = new Intent(MainActivity.this,
							AddLicenseplateActivity.class);
					startActivity(intent);
				} else {
					String carid = carset.getItem(position).getCar_id() + "";
					HashMap<String, String> idtakjson = new UserEntity()
					.getIdTaken(MainActivity.this);
					idtakjson.put("car_id", carid); 
					new HttpTask(homeCallback, MyURL.CHANGECAR).execute(idtakjson);

				}
				// 用于消失弹窗
				getPopupWindow();
			}
		});

		popupview = new PopupWindow(view, ViewGroup.LayoutParams.WRAP_CONTENT,
				ViewGroup.LayoutParams.WRAP_CONTENT);
		// popupview.setBackgroundDrawable(getResources().getDrawable(R.drawable.popupgray));
		popupview.setAnimationStyle(android.R.style.Animation_InputMethod);
		// 点击外面，窗口消失
		popupview.setOutsideTouchable(true);
		popupview.setFocusable(true);
		popupview.setTouchable(true);
		// 防止软键盘被弹出菜单遮住
		popupview
				.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
		view.setOnTouchListener(new OnTouchListener() {
			@Override
			public boolean onTouch(View v, MotionEvent event) {
				// TODO Auto-generated method stub
				if (popupview != null && popupview.isShowing()) {
					tv_changecar.setVisibility(View.VISIBLE);
					popupview.dismiss();
					popupview = null;

				}
				return false;
			}
		});

	}

	/***
	 * 获取PopupWindow实例
	 */
	private void getPopupWindow() {
		if (null != popupview) {
			tv_changecar.setVisibility(View.VISIBLE);
			popupview.dismiss();
			popupview = null;
			return;
		} else {
			initPopuptWindow();
			tv_changecar.setVisibility(View.INVISIBLE);
		}
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		// TODO Auto-generated method stub
		super.onActivityResult(requestCode, resultCode, data);
		switch (requestCode) {
		case 1:
			if(resultCode == 1){
				String result_value = data.getStringExtra("remindnum");
				tv_remindnum.setText(result_value);
			}
			break;
		case 2:
			if(resultCode == 1){
				RequestMainData();
			}
			break;
		default:
			break;
		}
	}

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
	}

}
